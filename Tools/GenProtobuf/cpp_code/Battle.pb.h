// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto

#ifndef PROTOBUF_Battle_2eproto__INCLUDED
#define PROTOBUF_Battle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
#include "BattleEnum.pb.h"
// @@protoc_insertion_point(includes)
namespace NetProto {
class BattleOperation;
class BattleOperationDefaultTypeInternal;
extern BattleOperationDefaultTypeInternal _BattleOperation_default_instance_;
class MoveObjectMutableState;
class MoveObjectMutableStateDefaultTypeInternal;
extern MoveObjectMutableStateDefaultTypeInternal _MoveObjectMutableState_default_instance_;
class MoveObjectState;
class MoveObjectStateDefaultTypeInternal;
extern MoveObjectStateDefaultTypeInternal _MoveObjectState_default_instance_;
class MoveToPos;
class MoveToPosDefaultTypeInternal;
extern MoveToPosDefaultTypeInternal _MoveToPos_default_instance_;
class RspFreeHero;
class RspFreeHeroDefaultTypeInternal;
extern RspFreeHeroDefaultTypeInternal _RspFreeHero_default_instance_;
class SceneObjectDisappear;
class SceneObjectDisappearDefaultTypeInternal;
extern SceneObjectDisappearDefaultTypeInternal _SceneObjectDisappear_default_instance_;
class SceneObjectState;
class SceneObjectStateDefaultTypeInternal;
extern SceneObjectStateDefaultTypeInternal _SceneObjectState_default_instance_;
class SelectHeroReq;
class SelectHeroReqDefaultTypeInternal;
extern SelectHeroReqDefaultTypeInternal _SelectHeroReq_default_instance_;
class SelectHeroRsp;
class SelectHeroRspDefaultTypeInternal;
extern SelectHeroRspDefaultTypeInternal _SelectHeroRsp_default_instance_;
class ViewAllGrids;
class ViewAllGridsDefaultTypeInternal;
extern ViewAllGridsDefaultTypeInternal _ViewAllGrids_default_instance_;
class ViewGrid;
class ViewGridDefaultTypeInternal;
extern ViewGridDefaultTypeInternal _ViewGrid_default_instance_;
class ViewSnapshot;
class ViewSnapshotDefaultTypeInternal;
extern ViewSnapshotDefaultTypeInternal _ViewSnapshot_default_instance_;
class ViewSnapshotDiff;
class ViewSnapshotDiffDefaultTypeInternal;
extern ViewSnapshotDiffDefaultTypeInternal _ViewSnapshotDiff_default_instance_;
}  // namespace NetProto

namespace NetProto {

namespace protobuf_Battle_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Battle_2eproto

// ===================================================================

class RspFreeHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.RspFreeHero) */ {
 public:
  RspFreeHero();
  virtual ~RspFreeHero();

  RspFreeHero(const RspFreeHero& from);

  inline RspFreeHero& operator=(const RspFreeHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspFreeHero(RspFreeHero&& from) noexcept
    : RspFreeHero() {
    *this = ::std::move(from);
  }

  inline RspFreeHero& operator=(RspFreeHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspFreeHero& default_instance();

  static inline const RspFreeHero* internal_default_instance() {
    return reinterpret_cast<const RspFreeHero*>(
               &_RspFreeHero_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(RspFreeHero* other);
  void Swap(RspFreeHero* other);
  friend void swap(RspFreeHero& a, RspFreeHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspFreeHero* New() const PROTOBUF_FINAL { return New(NULL); }

  RspFreeHero* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RspFreeHero& from);
  void MergeFrom(const RspFreeHero& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RspFreeHero* other);
  protected:
  explicit RspFreeHero(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 red_hero_id = 1;
  void clear_red_hero_id();
  static const int kRedHeroIdFieldNumber = 1;
  ::google::protobuf::uint64 red_hero_id() const;
  void set_red_hero_id(::google::protobuf::uint64 value);

  // uint64 blue_hero_id = 2;
  void clear_blue_hero_id();
  static const int kBlueHeroIdFieldNumber = 2;
  ::google::protobuf::uint64 blue_hero_id() const;
  void set_blue_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NetProto.RspFreeHero)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint64 red_hero_id_;
  ::google::protobuf::uint64 blue_hero_id_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectHeroReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SelectHeroReq) */ {
 public:
  SelectHeroReq();
  virtual ~SelectHeroReq();

  SelectHeroReq(const SelectHeroReq& from);

  inline SelectHeroReq& operator=(const SelectHeroReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectHeroReq(SelectHeroReq&& from) noexcept
    : SelectHeroReq() {
    *this = ::std::move(from);
  }

  inline SelectHeroReq& operator=(SelectHeroReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectHeroReq& default_instance();

  static inline const SelectHeroReq* internal_default_instance() {
    return reinterpret_cast<const SelectHeroReq*>(
               &_SelectHeroReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(SelectHeroReq* other);
  void Swap(SelectHeroReq* other);
  friend void swap(SelectHeroReq& a, SelectHeroReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectHeroReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectHeroReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectHeroReq& from);
  void MergeFrom(const SelectHeroReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectHeroReq* other);
  protected:
  explicit SelectHeroReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 hero_id = 1;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint64 hero_id() const;
  void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NetProto.SelectHeroReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint64 hero_id_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectHeroRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SelectHeroRsp) */ {
 public:
  SelectHeroRsp();
  virtual ~SelectHeroRsp();

  SelectHeroRsp(const SelectHeroRsp& from);

  inline SelectHeroRsp& operator=(const SelectHeroRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectHeroRsp(SelectHeroRsp&& from) noexcept
    : SelectHeroRsp() {
    *this = ::std::move(from);
  }

  inline SelectHeroRsp& operator=(SelectHeroRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectHeroRsp& default_instance();

  static inline const SelectHeroRsp* internal_default_instance() {
    return reinterpret_cast<const SelectHeroRsp*>(
               &_SelectHeroRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(SelectHeroRsp* other);
  void Swap(SelectHeroRsp* other);
  friend void swap(SelectHeroRsp& a, SelectHeroRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectHeroRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectHeroRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectHeroRsp& from);
  void MergeFrom(const SelectHeroRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectHeroRsp* other);
  protected:
  explicit SelectHeroRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 hero_id = 1;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint64 hero_id() const;
  void set_hero_id(::google::protobuf::uint64 value);

  // bool is_succ = 2;
  void clear_is_succ();
  static const int kIsSuccFieldNumber = 2;
  bool is_succ() const;
  void set_is_succ(bool value);

  // @@protoc_insertion_point(class_scope:NetProto.SelectHeroRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint64 hero_id_;
  bool is_succ_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneObjectDisappear : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SceneObjectDisappear) */ {
 public:
  SceneObjectDisappear();
  virtual ~SceneObjectDisappear();

  SceneObjectDisappear(const SceneObjectDisappear& from);

  inline SceneObjectDisappear& operator=(const SceneObjectDisappear& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneObjectDisappear(SceneObjectDisappear&& from) noexcept
    : SceneObjectDisappear() {
    *this = ::std::move(from);
  }

  inline SceneObjectDisappear& operator=(SceneObjectDisappear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneObjectDisappear& default_instance();

  static inline const SceneObjectDisappear* internal_default_instance() {
    return reinterpret_cast<const SceneObjectDisappear*>(
               &_SceneObjectDisappear_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(SceneObjectDisappear* other);
  void Swap(SceneObjectDisappear* other);
  friend void swap(SceneObjectDisappear& a, SceneObjectDisappear& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneObjectDisappear* New() const PROTOBUF_FINAL { return New(NULL); }

  SceneObjectDisappear* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SceneObjectDisappear& from);
  void MergeFrom(const SceneObjectDisappear& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SceneObjectDisappear* other);
  protected:
  explicit SceneObjectDisappear(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objids = 1;
  int objids_size() const;
  void clear_objids();
  static const int kObjidsFieldNumber = 1;
  ::google::protobuf::uint64 objids(int index) const;
  void set_objids(int index, ::google::protobuf::uint64 value);
  void add_objids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objids();

  // @@protoc_insertion_point(class_scope:NetProto.SceneObjectDisappear)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objids_;
  mutable int _objids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneObjectState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.SceneObjectState) */ {
 public:
  SceneObjectState();
  virtual ~SceneObjectState();

  SceneObjectState(const SceneObjectState& from);

  inline SceneObjectState& operator=(const SceneObjectState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneObjectState(SceneObjectState&& from) noexcept
    : SceneObjectState() {
    *this = ::std::move(from);
  }

  inline SceneObjectState& operator=(SceneObjectState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneObjectState& default_instance();

  static inline const SceneObjectState* internal_default_instance() {
    return reinterpret_cast<const SceneObjectState*>(
               &_SceneObjectState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(SceneObjectState* other);
  void Swap(SceneObjectState* other);
  friend void swap(SceneObjectState& a, SceneObjectState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneObjectState* New() const PROTOBUF_FINAL { return New(NULL); }

  SceneObjectState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SceneObjectState& from);
  void MergeFrom(const SceneObjectState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SceneObjectState* other);
  protected:
  explicit SceneObjectState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.PBVector3 pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  private:
  void _slow_mutable_pos();
  void _slow_set_allocated_pos(
      ::google::protobuf::Arena* message_arena, ::NetProto::PBVector3** pos);
  ::NetProto::PBVector3* _slow_release_pos();
  public:
  const ::NetProto::PBVector3& pos() const;
  ::NetProto::PBVector3* mutable_pos();
  ::NetProto::PBVector3* release_pos();
  void set_allocated_pos(::NetProto::PBVector3* pos);
  ::NetProto::PBVector3* unsafe_arena_release_pos();
  void unsafe_arena_set_allocated_pos(
      ::NetProto::PBVector3* pos);

  // uint64 objid = 1;
  void clear_objid();
  static const int kObjidFieldNumber = 1;
  ::google::protobuf::uint64 objid() const;
  void set_objid(::google::protobuf::uint64 value);

  // .NetProto.ESceneObject obj_type = 2;
  void clear_obj_type();
  static const int kObjTypeFieldNumber = 2;
  ::NetProto::ESceneObject obj_type() const;
  void set_obj_type(::NetProto::ESceneObject value);

  // int32 model_id = 3;
  void clear_model_id();
  static const int kModelIdFieldNumber = 3;
  ::google::protobuf::int32 model_id() const;
  void set_model_id(::google::protobuf::int32 value);

  // float rotation = 5;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  float rotation() const;
  void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:NetProto.SceneObjectState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NetProto::PBVector3* pos_;
  ::google::protobuf::uint64 objid_;
  int obj_type_;
  ::google::protobuf::int32 model_id_;
  float rotation_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveObjectState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.MoveObjectState) */ {
 public:
  MoveObjectState();
  virtual ~MoveObjectState();

  MoveObjectState(const MoveObjectState& from);

  inline MoveObjectState& operator=(const MoveObjectState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveObjectState(MoveObjectState&& from) noexcept
    : MoveObjectState() {
    *this = ::std::move(from);
  }

  inline MoveObjectState& operator=(MoveObjectState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveObjectState& default_instance();

  static inline const MoveObjectState* internal_default_instance() {
    return reinterpret_cast<const MoveObjectState*>(
               &_MoveObjectState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(MoveObjectState* other);
  void Swap(MoveObjectState* other);
  friend void swap(MoveObjectState& a, MoveObjectState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectState* New() const PROTOBUF_FINAL { return New(NULL); }

  MoveObjectState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MoveObjectState& from);
  void MergeFrom(const MoveObjectState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MoveObjectState* other);
  protected:
  explicit MoveObjectState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.SceneObjectState obj_state = 1;
  bool has_obj_state() const;
  void clear_obj_state();
  static const int kObjStateFieldNumber = 1;
  private:
  void _slow_mutable_obj_state();
  void _slow_set_allocated_obj_state(
      ::google::protobuf::Arena* message_arena, ::NetProto::SceneObjectState** obj_state);
  ::NetProto::SceneObjectState* _slow_release_obj_state();
  public:
  const ::NetProto::SceneObjectState& obj_state() const;
  ::NetProto::SceneObjectState* mutable_obj_state();
  ::NetProto::SceneObjectState* release_obj_state();
  void set_allocated_obj_state(::NetProto::SceneObjectState* obj_state);
  ::NetProto::SceneObjectState* unsafe_arena_release_obj_state();
  void unsafe_arena_set_allocated_obj_state(
      ::NetProto::SceneObjectState* obj_state);

  // int32 radius = 2;
  void clear_radius();
  static const int kRadiusFieldNumber = 2;
  ::google::protobuf::int32 radius() const;
  void set_radius(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 mass = 4;
  void clear_mass();
  static const int kMassFieldNumber = 4;
  ::google::protobuf::int32 mass() const;
  void set_mass(::google::protobuf::int32 value);

  // int32 max_speed = 5;
  void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  ::google::protobuf::int32 max_speed() const;
  void set_max_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NetProto.MoveObjectState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NetProto::SceneObjectState* obj_state_;
  ::google::protobuf::int32 radius_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 mass_;
  ::google::protobuf::int32 max_speed_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveObjectMutableState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.MoveObjectMutableState) */ {
 public:
  MoveObjectMutableState();
  virtual ~MoveObjectMutableState();

  MoveObjectMutableState(const MoveObjectMutableState& from);

  inline MoveObjectMutableState& operator=(const MoveObjectMutableState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveObjectMutableState(MoveObjectMutableState&& from) noexcept
    : MoveObjectMutableState() {
    *this = ::std::move(from);
  }

  inline MoveObjectMutableState& operator=(MoveObjectMutableState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveObjectMutableState& default_instance();

  static inline const MoveObjectMutableState* internal_default_instance() {
    return reinterpret_cast<const MoveObjectMutableState*>(
               &_MoveObjectMutableState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(MoveObjectMutableState* other);
  void Swap(MoveObjectMutableState* other);
  friend void swap(MoveObjectMutableState& a, MoveObjectMutableState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveObjectMutableState* New() const PROTOBUF_FINAL { return New(NULL); }

  MoveObjectMutableState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MoveObjectMutableState& from);
  void MergeFrom(const MoveObjectMutableState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MoveObjectMutableState* other);
  protected:
  explicit MoveObjectMutableState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.PBVector3 volecity = 3;
  bool has_volecity() const;
  void clear_volecity();
  static const int kVolecityFieldNumber = 3;
  private:
  void _slow_mutable_volecity();
  void _slow_set_allocated_volecity(
      ::google::protobuf::Arena* message_arena, ::NetProto::PBVector3** volecity);
  ::NetProto::PBVector3* _slow_release_volecity();
  public:
  const ::NetProto::PBVector3& volecity() const;
  ::NetProto::PBVector3* mutable_volecity();
  ::NetProto::PBVector3* release_volecity();
  void set_allocated_volecity(::NetProto::PBVector3* volecity);
  ::NetProto::PBVector3* unsafe_arena_release_volecity();
  void unsafe_arena_set_allocated_volecity(
      ::NetProto::PBVector3* volecity);

  // .NetProto.PBVector3 pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  private:
  void _slow_mutable_pos();
  void _slow_set_allocated_pos(
      ::google::protobuf::Arena* message_arena, ::NetProto::PBVector3** pos);
  ::NetProto::PBVector3* _slow_release_pos();
  public:
  const ::NetProto::PBVector3& pos() const;
  ::NetProto::PBVector3* mutable_pos();
  ::NetProto::PBVector3* release_pos();
  void set_allocated_pos(::NetProto::PBVector3* pos);
  ::NetProto::PBVector3* unsafe_arena_release_pos();
  void unsafe_arena_set_allocated_pos(
      ::NetProto::PBVector3* pos);

  // uint64 objid = 1;
  void clear_objid();
  static const int kObjidFieldNumber = 1;
  ::google::protobuf::uint64 objid() const;
  void set_objid(::google::protobuf::uint64 value);

  // .NetProto.EMoveAgentState move_agent_state = 2;
  void clear_move_agent_state();
  static const int kMoveAgentStateFieldNumber = 2;
  ::NetProto::EMoveAgentState move_agent_state() const;
  void set_move_agent_state(::NetProto::EMoveAgentState value);

  // float rotation = 5;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  float rotation() const;
  void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:NetProto.MoveObjectMutableState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NetProto::PBVector3* volecity_;
  ::NetProto::PBVector3* pos_;
  ::google::protobuf::uint64 objid_;
  int move_agent_state_;
  float rotation_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveToPos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.MoveToPos) */ {
 public:
  MoveToPos();
  virtual ~MoveToPos();

  MoveToPos(const MoveToPos& from);

  inline MoveToPos& operator=(const MoveToPos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveToPos(MoveToPos&& from) noexcept
    : MoveToPos() {
    *this = ::std::move(from);
  }

  inline MoveToPos& operator=(MoveToPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveToPos& default_instance();

  static inline const MoveToPos* internal_default_instance() {
    return reinterpret_cast<const MoveToPos*>(
               &_MoveToPos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(MoveToPos* other);
  void Swap(MoveToPos* other);
  friend void swap(MoveToPos& a, MoveToPos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveToPos* New() const PROTOBUF_FINAL { return New(NULL); }

  MoveToPos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MoveToPos& from);
  void MergeFrom(const MoveToPos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MoveToPos* other);
  protected:
  explicit MoveToPos(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.PBVector2 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  void _slow_mutable_pos();
  void _slow_set_allocated_pos(
      ::google::protobuf::Arena* message_arena, ::NetProto::PBVector2** pos);
  ::NetProto::PBVector2* _slow_release_pos();
  public:
  const ::NetProto::PBVector2& pos() const;
  ::NetProto::PBVector2* mutable_pos();
  ::NetProto::PBVector2* release_pos();
  void set_allocated_pos(::NetProto::PBVector2* pos);
  ::NetProto::PBVector2* unsafe_arena_release_pos();
  void unsafe_arena_set_allocated_pos(
      ::NetProto::PBVector2* pos);

  // @@protoc_insertion_point(class_scope:NetProto.MoveToPos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NetProto::PBVector2* pos_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattleOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.BattleOperation) */ {
 public:
  BattleOperation();
  virtual ~BattleOperation();

  BattleOperation(const BattleOperation& from);

  inline BattleOperation& operator=(const BattleOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattleOperation(BattleOperation&& from) noexcept
    : BattleOperation() {
    *this = ::std::move(from);
  }

  inline BattleOperation& operator=(BattleOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleOperation& default_instance();

  static inline const BattleOperation* internal_default_instance() {
    return reinterpret_cast<const BattleOperation*>(
               &_BattleOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(BattleOperation* other);
  void Swap(BattleOperation* other);
  friend void swap(BattleOperation& a, BattleOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattleOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  BattleOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattleOperation& from);
  void MergeFrom(const BattleOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattleOperation* other);
  protected:
  explicit BattleOperation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.PBVector2 pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  private:
  void _slow_mutable_pos();
  void _slow_set_allocated_pos(
      ::google::protobuf::Arena* message_arena, ::NetProto::PBVector2** pos);
  ::NetProto::PBVector2* _slow_release_pos();
  public:
  const ::NetProto::PBVector2& pos() const;
  ::NetProto::PBVector2* mutable_pos();
  ::NetProto::PBVector2* release_pos();
  void set_allocated_pos(::NetProto::PBVector2* pos);
  ::NetProto::PBVector2* unsafe_arena_release_pos();
  void unsafe_arena_set_allocated_pos(
      ::NetProto::PBVector2* pos);

  // uint64 target_id = 2;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  ::google::protobuf::uint64 target_id() const;
  void set_target_id(::google::protobuf::uint64 value);

  // .NetProto.EBattleOperation opera = 1;
  void clear_opera();
  static const int kOperaFieldNumber = 1;
  ::NetProto::EBattleOperation opera() const;
  void set_opera(::NetProto::EBattleOperation value);

  // float dir = 3;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  float dir() const;
  void set_dir(float value);

  // @@protoc_insertion_point(class_scope:NetProto.BattleOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NetProto::PBVector2* pos_;
  ::google::protobuf::uint64 target_id_;
  int opera_;
  float dir_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.ViewGrid) */ {
 public:
  ViewGrid();
  virtual ~ViewGrid();

  ViewGrid(const ViewGrid& from);

  inline ViewGrid& operator=(const ViewGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewGrid(ViewGrid&& from) noexcept
    : ViewGrid() {
    *this = ::std::move(from);
  }

  inline ViewGrid& operator=(ViewGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewGrid& default_instance();

  static inline const ViewGrid* internal_default_instance() {
    return reinterpret_cast<const ViewGrid*>(
               &_ViewGrid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ViewGrid* other);
  void Swap(ViewGrid* other);
  friend void swap(ViewGrid& a, ViewGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewGrid* New() const PROTOBUF_FINAL { return New(NULL); }

  ViewGrid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ViewGrid& from);
  void MergeFrom(const ViewGrid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ViewGrid* other);
  protected:
  explicit ViewGrid(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NetProto.PBVector2 center = 1;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 1;
  private:
  void _slow_mutable_center();
  void _slow_set_allocated_center(
      ::google::protobuf::Arena* message_arena, ::NetProto::PBVector2** center);
  ::NetProto::PBVector2* _slow_release_center();
  public:
  const ::NetProto::PBVector2& center() const;
  ::NetProto::PBVector2* mutable_center();
  ::NetProto::PBVector2* release_center();
  void set_allocated_center(::NetProto::PBVector2* center);
  ::NetProto::PBVector2* unsafe_arena_release_center();
  void unsafe_arena_set_allocated_center(
      ::NetProto::PBVector2* center);

  // int32 grid_type = 2;
  void clear_grid_type();
  static const int kGridTypeFieldNumber = 2;
  ::google::protobuf::int32 grid_type() const;
  void set_grid_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NetProto.ViewGrid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NetProto::PBVector2* center_;
  ::google::protobuf::int32 grid_type_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewSnapshotDiff : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.ViewSnapshotDiff) */ {
 public:
  ViewSnapshotDiff();
  virtual ~ViewSnapshotDiff();

  ViewSnapshotDiff(const ViewSnapshotDiff& from);

  inline ViewSnapshotDiff& operator=(const ViewSnapshotDiff& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewSnapshotDiff(ViewSnapshotDiff&& from) noexcept
    : ViewSnapshotDiff() {
    *this = ::std::move(from);
  }

  inline ViewSnapshotDiff& operator=(ViewSnapshotDiff&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewSnapshotDiff& default_instance();

  static inline const ViewSnapshotDiff* internal_default_instance() {
    return reinterpret_cast<const ViewSnapshotDiff*>(
               &_ViewSnapshotDiff_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(ViewSnapshotDiff* other);
  void Swap(ViewSnapshotDiff* other);
  friend void swap(ViewSnapshotDiff& a, ViewSnapshotDiff& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewSnapshotDiff* New() const PROTOBUF_FINAL { return New(NULL); }

  ViewSnapshotDiff* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ViewSnapshotDiff& from);
  void MergeFrom(const ViewSnapshotDiff& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ViewSnapshotDiff* other);
  protected:
  explicit ViewSnapshotDiff(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 more_grids = 1;
  int more_grids_size() const;
  void clear_more_grids();
  static const int kMoreGridsFieldNumber = 1;
  ::google::protobuf::int32 more_grids(int index) const;
  void set_more_grids(int index, ::google::protobuf::int32 value);
  void add_more_grids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      more_grids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_more_grids();

  // repeated int32 miss_grids = 2;
  int miss_grids_size() const;
  void clear_miss_grids();
  static const int kMissGridsFieldNumber = 2;
  ::google::protobuf::int32 miss_grids(int index) const;
  void set_miss_grids(int index, ::google::protobuf::int32 value);
  void add_miss_grids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      miss_grids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_miss_grids();

  // @@protoc_insertion_point(class_scope:NetProto.ViewSnapshotDiff)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > more_grids_;
  mutable int _more_grids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > miss_grids_;
  mutable int _miss_grids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewSnapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.ViewSnapshot) */ {
 public:
  ViewSnapshot();
  virtual ~ViewSnapshot();

  ViewSnapshot(const ViewSnapshot& from);

  inline ViewSnapshot& operator=(const ViewSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewSnapshot(ViewSnapshot&& from) noexcept
    : ViewSnapshot() {
    *this = ::std::move(from);
  }

  inline ViewSnapshot& operator=(ViewSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewSnapshot& default_instance();

  static inline const ViewSnapshot* internal_default_instance() {
    return reinterpret_cast<const ViewSnapshot*>(
               &_ViewSnapshot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(ViewSnapshot* other);
  void Swap(ViewSnapshot* other);
  friend void swap(ViewSnapshot& a, ViewSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewSnapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  ViewSnapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ViewSnapshot& from);
  void MergeFrom(const ViewSnapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ViewSnapshot* other);
  protected:
  explicit ViewSnapshot(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 light_grids = 1;
  int light_grids_size() const;
  void clear_light_grids();
  static const int kLightGridsFieldNumber = 1;
  ::google::protobuf::int32 light_grids(int index) const;
  void set_light_grids(int index, ::google::protobuf::int32 value);
  void add_light_grids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      light_grids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_light_grids();

  // @@protoc_insertion_point(class_scope:NetProto.ViewSnapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > light_grids_;
  mutable int _light_grids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewAllGrids : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.ViewAllGrids) */ {
 public:
  ViewAllGrids();
  virtual ~ViewAllGrids();

  ViewAllGrids(const ViewAllGrids& from);

  inline ViewAllGrids& operator=(const ViewAllGrids& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewAllGrids(ViewAllGrids&& from) noexcept
    : ViewAllGrids() {
    *this = ::std::move(from);
  }

  inline ViewAllGrids& operator=(ViewAllGrids&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewAllGrids& default_instance();

  static inline const ViewAllGrids* internal_default_instance() {
    return reinterpret_cast<const ViewAllGrids*>(
               &_ViewAllGrids_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(ViewAllGrids* other);
  void Swap(ViewAllGrids* other);
  friend void swap(ViewAllGrids& a, ViewAllGrids& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewAllGrids* New() const PROTOBUF_FINAL { return New(NULL); }

  ViewAllGrids* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ViewAllGrids& from);
  void MergeFrom(const ViewAllGrids& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ViewAllGrids* other);
  protected:
  explicit ViewAllGrids(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetProto.ViewGrid grids = 4;
  int grids_size() const;
  void clear_grids();
  static const int kGridsFieldNumber = 4;
  const ::NetProto::ViewGrid& grids(int index) const;
  ::NetProto::ViewGrid* mutable_grids(int index);
  ::NetProto::ViewGrid* add_grids();
  ::google::protobuf::RepeatedPtrField< ::NetProto::ViewGrid >*
      mutable_grids();
  const ::google::protobuf::RepeatedPtrField< ::NetProto::ViewGrid >&
      grids() const;

  // float grid_size = 1;
  void clear_grid_size();
  static const int kGridSizeFieldNumber = 1;
  float grid_size() const;
  void set_grid_size(float value);

  // int32 row = 2;
  void clear_row();
  static const int kRowFieldNumber = 2;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 3;
  void clear_col();
  static const int kColFieldNumber = 3;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NetProto.ViewAllGrids)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::NetProto::ViewGrid > grids_;
  float grid_size_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable int _cached_size_;
  friend struct protobuf_Battle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RspFreeHero

// uint64 red_hero_id = 1;
inline void RspFreeHero::clear_red_hero_id() {
  red_hero_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RspFreeHero::red_hero_id() const {
  // @@protoc_insertion_point(field_get:NetProto.RspFreeHero.red_hero_id)
  return red_hero_id_;
}
inline void RspFreeHero::set_red_hero_id(::google::protobuf::uint64 value) {
  
  red_hero_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.RspFreeHero.red_hero_id)
}

// uint64 blue_hero_id = 2;
inline void RspFreeHero::clear_blue_hero_id() {
  blue_hero_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RspFreeHero::blue_hero_id() const {
  // @@protoc_insertion_point(field_get:NetProto.RspFreeHero.blue_hero_id)
  return blue_hero_id_;
}
inline void RspFreeHero::set_blue_hero_id(::google::protobuf::uint64 value) {
  
  blue_hero_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.RspFreeHero.blue_hero_id)
}

// -------------------------------------------------------------------

// SelectHeroReq

// uint64 hero_id = 1;
inline void SelectHeroReq::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SelectHeroReq::hero_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SelectHeroReq.hero_id)
  return hero_id_;
}
inline void SelectHeroReq::set_hero_id(::google::protobuf::uint64 value) {
  
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SelectHeroReq.hero_id)
}

// -------------------------------------------------------------------

// SelectHeroRsp

// uint64 hero_id = 1;
inline void SelectHeroRsp::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SelectHeroRsp::hero_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SelectHeroRsp.hero_id)
  return hero_id_;
}
inline void SelectHeroRsp::set_hero_id(::google::protobuf::uint64 value) {
  
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SelectHeroRsp.hero_id)
}

// bool is_succ = 2;
inline void SelectHeroRsp::clear_is_succ() {
  is_succ_ = false;
}
inline bool SelectHeroRsp::is_succ() const {
  // @@protoc_insertion_point(field_get:NetProto.SelectHeroRsp.is_succ)
  return is_succ_;
}
inline void SelectHeroRsp::set_is_succ(bool value) {
  
  is_succ_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SelectHeroRsp.is_succ)
}

// -------------------------------------------------------------------

// SceneObjectDisappear

// repeated uint64 objids = 1;
inline int SceneObjectDisappear::objids_size() const {
  return objids_.size();
}
inline void SceneObjectDisappear::clear_objids() {
  objids_.Clear();
}
inline ::google::protobuf::uint64 SceneObjectDisappear::objids(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.SceneObjectDisappear.objids)
  return objids_.Get(index);
}
inline void SceneObjectDisappear::set_objids(int index, ::google::protobuf::uint64 value) {
  objids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetProto.SceneObjectDisappear.objids)
}
inline void SceneObjectDisappear::add_objids(::google::protobuf::uint64 value) {
  objids_.Add(value);
  // @@protoc_insertion_point(field_add:NetProto.SceneObjectDisappear.objids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SceneObjectDisappear::objids() const {
  // @@protoc_insertion_point(field_list:NetProto.SceneObjectDisappear.objids)
  return objids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SceneObjectDisappear::mutable_objids() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.SceneObjectDisappear.objids)
  return &objids_;
}

// -------------------------------------------------------------------

// SceneObjectState

// uint64 objid = 1;
inline void SceneObjectState::clear_objid() {
  objid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SceneObjectState::objid() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneObjectState.objid)
  return objid_;
}
inline void SceneObjectState::set_objid(::google::protobuf::uint64 value) {
  
  objid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneObjectState.objid)
}

// .NetProto.ESceneObject obj_type = 2;
inline void SceneObjectState::clear_obj_type() {
  obj_type_ = 0;
}
inline ::NetProto::ESceneObject SceneObjectState::obj_type() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneObjectState.obj_type)
  return static_cast< ::NetProto::ESceneObject >(obj_type_);
}
inline void SceneObjectState::set_obj_type(::NetProto::ESceneObject value) {
  
  obj_type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneObjectState.obj_type)
}

// int32 model_id = 3;
inline void SceneObjectState::clear_model_id() {
  model_id_ = 0;
}
inline ::google::protobuf::int32 SceneObjectState::model_id() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneObjectState.model_id)
  return model_id_;
}
inline void SceneObjectState::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneObjectState.model_id)
}

// .NetProto.PBVector3 pos = 4;
inline bool SceneObjectState::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void SceneObjectState::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::NetProto::PBVector3& SceneObjectState::pos() const {
  const ::NetProto::PBVector3* p = pos_;
  // @@protoc_insertion_point(field_get:NetProto.SceneObjectState.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::PBVector3*>(
      &::NetProto::_PBVector3_default_instance_);
}
inline ::NetProto::PBVector3* SceneObjectState::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.SceneObjectState.pos)
  return pos_;
}
inline ::NetProto::PBVector3* SceneObjectState::release_pos() {
  // @@protoc_insertion_point(field_release:NetProto.SceneObjectState.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::NetProto::PBVector3* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
inline  void SceneObjectState::set_allocated_pos(::NetProto::PBVector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.SceneObjectState.pos)
}

// float rotation = 5;
inline void SceneObjectState::clear_rotation() {
  rotation_ = 0;
}
inline float SceneObjectState::rotation() const {
  // @@protoc_insertion_point(field_get:NetProto.SceneObjectState.rotation)
  return rotation_;
}
inline void SceneObjectState::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:NetProto.SceneObjectState.rotation)
}

// -------------------------------------------------------------------

// MoveObjectState

// .NetProto.SceneObjectState obj_state = 1;
inline bool MoveObjectState::has_obj_state() const {
  return this != internal_default_instance() && obj_state_ != NULL;
}
inline void MoveObjectState::clear_obj_state() {
  if (GetArenaNoVirtual() == NULL && obj_state_ != NULL) delete obj_state_;
  obj_state_ = NULL;
}
inline const ::NetProto::SceneObjectState& MoveObjectState::obj_state() const {
  const ::NetProto::SceneObjectState* p = obj_state_;
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectState.obj_state)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::SceneObjectState*>(
      &::NetProto::_SceneObjectState_default_instance_);
}
inline ::NetProto::SceneObjectState* MoveObjectState::mutable_obj_state() {
  
  if (obj_state_ == NULL) {
    _slow_mutable_obj_state();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MoveObjectState.obj_state)
  return obj_state_;
}
inline ::NetProto::SceneObjectState* MoveObjectState::release_obj_state() {
  // @@protoc_insertion_point(field_release:NetProto.MoveObjectState.obj_state)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_obj_state();
  } else {
    ::NetProto::SceneObjectState* temp = obj_state_;
    obj_state_ = NULL;
    return temp;
  }
}
inline  void MoveObjectState::set_allocated_obj_state(::NetProto::SceneObjectState* obj_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obj_state_;
  }
  if (obj_state != NULL) {
    _slow_set_allocated_obj_state(message_arena, &obj_state);
  }
  obj_state_ = obj_state;
  if (obj_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MoveObjectState.obj_state)
}

// int32 radius = 2;
inline void MoveObjectState::clear_radius() {
  radius_ = 0;
}
inline ::google::protobuf::int32 MoveObjectState::radius() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectState.radius)
  return radius_;
}
inline void MoveObjectState::set_radius(::google::protobuf::int32 value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectState.radius)
}

// int32 height = 3;
inline void MoveObjectState::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 MoveObjectState::height() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectState.height)
  return height_;
}
inline void MoveObjectState::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectState.height)
}

// int32 mass = 4;
inline void MoveObjectState::clear_mass() {
  mass_ = 0;
}
inline ::google::protobuf::int32 MoveObjectState::mass() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectState.mass)
  return mass_;
}
inline void MoveObjectState::set_mass(::google::protobuf::int32 value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectState.mass)
}

// int32 max_speed = 5;
inline void MoveObjectState::clear_max_speed() {
  max_speed_ = 0;
}
inline ::google::protobuf::int32 MoveObjectState::max_speed() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectState.max_speed)
  return max_speed_;
}
inline void MoveObjectState::set_max_speed(::google::protobuf::int32 value) {
  
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectState.max_speed)
}

// -------------------------------------------------------------------

// MoveObjectMutableState

// uint64 objid = 1;
inline void MoveObjectMutableState::clear_objid() {
  objid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MoveObjectMutableState::objid() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectMutableState.objid)
  return objid_;
}
inline void MoveObjectMutableState::set_objid(::google::protobuf::uint64 value) {
  
  objid_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectMutableState.objid)
}

// .NetProto.EMoveAgentState move_agent_state = 2;
inline void MoveObjectMutableState::clear_move_agent_state() {
  move_agent_state_ = 0;
}
inline ::NetProto::EMoveAgentState MoveObjectMutableState::move_agent_state() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectMutableState.move_agent_state)
  return static_cast< ::NetProto::EMoveAgentState >(move_agent_state_);
}
inline void MoveObjectMutableState::set_move_agent_state(::NetProto::EMoveAgentState value) {
  
  move_agent_state_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectMutableState.move_agent_state)
}

// .NetProto.PBVector3 volecity = 3;
inline bool MoveObjectMutableState::has_volecity() const {
  return this != internal_default_instance() && volecity_ != NULL;
}
inline void MoveObjectMutableState::clear_volecity() {
  if (GetArenaNoVirtual() == NULL && volecity_ != NULL) delete volecity_;
  volecity_ = NULL;
}
inline const ::NetProto::PBVector3& MoveObjectMutableState::volecity() const {
  const ::NetProto::PBVector3* p = volecity_;
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectMutableState.volecity)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::PBVector3*>(
      &::NetProto::_PBVector3_default_instance_);
}
inline ::NetProto::PBVector3* MoveObjectMutableState::mutable_volecity() {
  
  if (volecity_ == NULL) {
    _slow_mutable_volecity();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MoveObjectMutableState.volecity)
  return volecity_;
}
inline ::NetProto::PBVector3* MoveObjectMutableState::release_volecity() {
  // @@protoc_insertion_point(field_release:NetProto.MoveObjectMutableState.volecity)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_volecity();
  } else {
    ::NetProto::PBVector3* temp = volecity_;
    volecity_ = NULL;
    return temp;
  }
}
inline  void MoveObjectMutableState::set_allocated_volecity(::NetProto::PBVector3* volecity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete volecity_;
  }
  if (volecity != NULL) {
    _slow_set_allocated_volecity(message_arena, &volecity);
  }
  volecity_ = volecity;
  if (volecity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MoveObjectMutableState.volecity)
}

// .NetProto.PBVector3 pos = 4;
inline bool MoveObjectMutableState::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void MoveObjectMutableState::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::NetProto::PBVector3& MoveObjectMutableState::pos() const {
  const ::NetProto::PBVector3* p = pos_;
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectMutableState.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::PBVector3*>(
      &::NetProto::_PBVector3_default_instance_);
}
inline ::NetProto::PBVector3* MoveObjectMutableState::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MoveObjectMutableState.pos)
  return pos_;
}
inline ::NetProto::PBVector3* MoveObjectMutableState::release_pos() {
  // @@protoc_insertion_point(field_release:NetProto.MoveObjectMutableState.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::NetProto::PBVector3* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
inline  void MoveObjectMutableState::set_allocated_pos(::NetProto::PBVector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MoveObjectMutableState.pos)
}

// float rotation = 5;
inline void MoveObjectMutableState::clear_rotation() {
  rotation_ = 0;
}
inline float MoveObjectMutableState::rotation() const {
  // @@protoc_insertion_point(field_get:NetProto.MoveObjectMutableState.rotation)
  return rotation_;
}
inline void MoveObjectMutableState::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:NetProto.MoveObjectMutableState.rotation)
}

// -------------------------------------------------------------------

// MoveToPos

// .NetProto.PBVector2 pos = 1;
inline bool MoveToPos::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void MoveToPos::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::NetProto::PBVector2& MoveToPos::pos() const {
  const ::NetProto::PBVector2* p = pos_;
  // @@protoc_insertion_point(field_get:NetProto.MoveToPos.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::PBVector2*>(
      &::NetProto::_PBVector2_default_instance_);
}
inline ::NetProto::PBVector2* MoveToPos::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.MoveToPos.pos)
  return pos_;
}
inline ::NetProto::PBVector2* MoveToPos::release_pos() {
  // @@protoc_insertion_point(field_release:NetProto.MoveToPos.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::NetProto::PBVector2* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
inline  void MoveToPos::set_allocated_pos(::NetProto::PBVector2* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.MoveToPos.pos)
}

// -------------------------------------------------------------------

// BattleOperation

// .NetProto.EBattleOperation opera = 1;
inline void BattleOperation::clear_opera() {
  opera_ = 0;
}
inline ::NetProto::EBattleOperation BattleOperation::opera() const {
  // @@protoc_insertion_point(field_get:NetProto.BattleOperation.opera)
  return static_cast< ::NetProto::EBattleOperation >(opera_);
}
inline void BattleOperation::set_opera(::NetProto::EBattleOperation value) {
  
  opera_ = value;
  // @@protoc_insertion_point(field_set:NetProto.BattleOperation.opera)
}

// uint64 target_id = 2;
inline void BattleOperation::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BattleOperation::target_id() const {
  // @@protoc_insertion_point(field_get:NetProto.BattleOperation.target_id)
  return target_id_;
}
inline void BattleOperation::set_target_id(::google::protobuf::uint64 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:NetProto.BattleOperation.target_id)
}

// float dir = 3;
inline void BattleOperation::clear_dir() {
  dir_ = 0;
}
inline float BattleOperation::dir() const {
  // @@protoc_insertion_point(field_get:NetProto.BattleOperation.dir)
  return dir_;
}
inline void BattleOperation::set_dir(float value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:NetProto.BattleOperation.dir)
}

// .NetProto.PBVector2 pos = 4;
inline bool BattleOperation::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void BattleOperation::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::NetProto::PBVector2& BattleOperation::pos() const {
  const ::NetProto::PBVector2* p = pos_;
  // @@protoc_insertion_point(field_get:NetProto.BattleOperation.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::PBVector2*>(
      &::NetProto::_PBVector2_default_instance_);
}
inline ::NetProto::PBVector2* BattleOperation::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.BattleOperation.pos)
  return pos_;
}
inline ::NetProto::PBVector2* BattleOperation::release_pos() {
  // @@protoc_insertion_point(field_release:NetProto.BattleOperation.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::NetProto::PBVector2* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
inline  void BattleOperation::set_allocated_pos(::NetProto::PBVector2* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.BattleOperation.pos)
}

// -------------------------------------------------------------------

// ViewGrid

// .NetProto.PBVector2 center = 1;
inline bool ViewGrid::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
inline void ViewGrid::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
inline const ::NetProto::PBVector2& ViewGrid::center() const {
  const ::NetProto::PBVector2* p = center_;
  // @@protoc_insertion_point(field_get:NetProto.ViewGrid.center)
  return p != NULL ? *p : *reinterpret_cast<const ::NetProto::PBVector2*>(
      &::NetProto::_PBVector2_default_instance_);
}
inline ::NetProto::PBVector2* ViewGrid::mutable_center() {
  
  if (center_ == NULL) {
    _slow_mutable_center();
  }
  // @@protoc_insertion_point(field_mutable:NetProto.ViewGrid.center)
  return center_;
}
inline ::NetProto::PBVector2* ViewGrid::release_center() {
  // @@protoc_insertion_point(field_release:NetProto.ViewGrid.center)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_center();
  } else {
    ::NetProto::PBVector2* temp = center_;
    center_ = NULL;
    return temp;
  }
}
inline  void ViewGrid::set_allocated_center(::NetProto::PBVector2* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_;
  }
  if (center != NULL) {
    _slow_set_allocated_center(message_arena, &center);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NetProto.ViewGrid.center)
}

// int32 grid_type = 2;
inline void ViewGrid::clear_grid_type() {
  grid_type_ = 0;
}
inline ::google::protobuf::int32 ViewGrid::grid_type() const {
  // @@protoc_insertion_point(field_get:NetProto.ViewGrid.grid_type)
  return grid_type_;
}
inline void ViewGrid::set_grid_type(::google::protobuf::int32 value) {
  
  grid_type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.ViewGrid.grid_type)
}

// -------------------------------------------------------------------

// ViewSnapshotDiff

// repeated int32 more_grids = 1;
inline int ViewSnapshotDiff::more_grids_size() const {
  return more_grids_.size();
}
inline void ViewSnapshotDiff::clear_more_grids() {
  more_grids_.Clear();
}
inline ::google::protobuf::int32 ViewSnapshotDiff::more_grids(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.ViewSnapshotDiff.more_grids)
  return more_grids_.Get(index);
}
inline void ViewSnapshotDiff::set_more_grids(int index, ::google::protobuf::int32 value) {
  more_grids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetProto.ViewSnapshotDiff.more_grids)
}
inline void ViewSnapshotDiff::add_more_grids(::google::protobuf::int32 value) {
  more_grids_.Add(value);
  // @@protoc_insertion_point(field_add:NetProto.ViewSnapshotDiff.more_grids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ViewSnapshotDiff::more_grids() const {
  // @@protoc_insertion_point(field_list:NetProto.ViewSnapshotDiff.more_grids)
  return more_grids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ViewSnapshotDiff::mutable_more_grids() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.ViewSnapshotDiff.more_grids)
  return &more_grids_;
}

// repeated int32 miss_grids = 2;
inline int ViewSnapshotDiff::miss_grids_size() const {
  return miss_grids_.size();
}
inline void ViewSnapshotDiff::clear_miss_grids() {
  miss_grids_.Clear();
}
inline ::google::protobuf::int32 ViewSnapshotDiff::miss_grids(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.ViewSnapshotDiff.miss_grids)
  return miss_grids_.Get(index);
}
inline void ViewSnapshotDiff::set_miss_grids(int index, ::google::protobuf::int32 value) {
  miss_grids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetProto.ViewSnapshotDiff.miss_grids)
}
inline void ViewSnapshotDiff::add_miss_grids(::google::protobuf::int32 value) {
  miss_grids_.Add(value);
  // @@protoc_insertion_point(field_add:NetProto.ViewSnapshotDiff.miss_grids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ViewSnapshotDiff::miss_grids() const {
  // @@protoc_insertion_point(field_list:NetProto.ViewSnapshotDiff.miss_grids)
  return miss_grids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ViewSnapshotDiff::mutable_miss_grids() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.ViewSnapshotDiff.miss_grids)
  return &miss_grids_;
}

// -------------------------------------------------------------------

// ViewSnapshot

// repeated int32 light_grids = 1;
inline int ViewSnapshot::light_grids_size() const {
  return light_grids_.size();
}
inline void ViewSnapshot::clear_light_grids() {
  light_grids_.Clear();
}
inline ::google::protobuf::int32 ViewSnapshot::light_grids(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.ViewSnapshot.light_grids)
  return light_grids_.Get(index);
}
inline void ViewSnapshot::set_light_grids(int index, ::google::protobuf::int32 value) {
  light_grids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetProto.ViewSnapshot.light_grids)
}
inline void ViewSnapshot::add_light_grids(::google::protobuf::int32 value) {
  light_grids_.Add(value);
  // @@protoc_insertion_point(field_add:NetProto.ViewSnapshot.light_grids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ViewSnapshot::light_grids() const {
  // @@protoc_insertion_point(field_list:NetProto.ViewSnapshot.light_grids)
  return light_grids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ViewSnapshot::mutable_light_grids() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.ViewSnapshot.light_grids)
  return &light_grids_;
}

// -------------------------------------------------------------------

// ViewAllGrids

// float grid_size = 1;
inline void ViewAllGrids::clear_grid_size() {
  grid_size_ = 0;
}
inline float ViewAllGrids::grid_size() const {
  // @@protoc_insertion_point(field_get:NetProto.ViewAllGrids.grid_size)
  return grid_size_;
}
inline void ViewAllGrids::set_grid_size(float value) {
  
  grid_size_ = value;
  // @@protoc_insertion_point(field_set:NetProto.ViewAllGrids.grid_size)
}

// int32 row = 2;
inline void ViewAllGrids::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 ViewAllGrids::row() const {
  // @@protoc_insertion_point(field_get:NetProto.ViewAllGrids.row)
  return row_;
}
inline void ViewAllGrids::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NetProto.ViewAllGrids.row)
}

// int32 col = 3;
inline void ViewAllGrids::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 ViewAllGrids::col() const {
  // @@protoc_insertion_point(field_get:NetProto.ViewAllGrids.col)
  return col_;
}
inline void ViewAllGrids::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NetProto.ViewAllGrids.col)
}

// repeated .NetProto.ViewGrid grids = 4;
inline int ViewAllGrids::grids_size() const {
  return grids_.size();
}
inline void ViewAllGrids::clear_grids() {
  grids_.Clear();
}
inline const ::NetProto::ViewGrid& ViewAllGrids::grids(int index) const {
  // @@protoc_insertion_point(field_get:NetProto.ViewAllGrids.grids)
  return grids_.Get(index);
}
inline ::NetProto::ViewGrid* ViewAllGrids::mutable_grids(int index) {
  // @@protoc_insertion_point(field_mutable:NetProto.ViewAllGrids.grids)
  return grids_.Mutable(index);
}
inline ::NetProto::ViewGrid* ViewAllGrids::add_grids() {
  // @@protoc_insertion_point(field_add:NetProto.ViewAllGrids.grids)
  return grids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto::ViewGrid >*
ViewAllGrids::mutable_grids() {
  // @@protoc_insertion_point(field_mutable_list:NetProto.ViewAllGrids.grids)
  return &grids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto::ViewGrid >&
ViewAllGrids::grids() const {
  // @@protoc_insertion_point(field_list:NetProto.ViewAllGrids.grids)
  return grids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Battle_2eproto__INCLUDED
