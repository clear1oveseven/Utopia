// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from Battle.proto</summary>
  public static partial class BattleReflection {

    #region Descriptor
    /// <summary>File descriptor for Battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxCYXR0bGUucHJvdG8SCE5ldFByb3RvGgxDb21tb24ucHJvdG8aEEJhdHRs",
            "ZUVudW0ucHJvdG8iOAoLUnNwRnJlZUhlcm8SEwoLcmVkX2hlcm9faWQYASAB",
            "KAQSFAoMYmx1ZV9oZXJvX2lkGAIgASgEIiAKDVNlbGVjdEhlcm9SZXESDwoH",
            "aGVyb19pZBgBIAEoBCIxCg1TZWxlY3RIZXJvUnNwEg8KB2hlcm9faWQYASAB",
            "KAQSDwoHaXNfc3VjYxgCIAEoCCImChRTY2VuZU9iamVjdERpc2FwcGVhchIO",
            "CgZvYmppZHMYASADKAQikQEKEFNjZW5lT2JqZWN0U3RhdGUSDQoFb2JqaWQY",
            "ASABKAQSKAoIb2JqX3R5cGUYAiABKA4yFi5OZXRQcm90by5FU2NlbmVPYmpl",
            "Y3QSEAoIbW9kZWxfaWQYAyABKAUSIAoDcG9zGAQgASgLMhMuTmV0UHJvdG8u",
            "UEJWZWN0b3IzEhAKCHJvdGF0aW9uGAUgASgCIoEBCg9Nb3ZlT2JqZWN0U3Rh",
            "dGUSLQoJb2JqX3N0YXRlGAEgASgLMhouTmV0UHJvdG8uU2NlbmVPYmplY3RT",
            "dGF0ZRIOCgZyYWRpdXMYAiABKAUSDgoGaGVpZ2h0GAMgASgFEgwKBG1hc3MY",
            "BCABKAUSEQoJbWF4X3NwZWVkGAUgASgFIrcBChZNb3ZlT2JqZWN0TXV0YWJs",
            "ZVN0YXRlEg0KBW9iamlkGAEgASgEEjMKEG1vdmVfYWdlbnRfc3RhdGUYAiAB",
            "KA4yGS5OZXRQcm90by5FTW92ZUFnZW50U3RhdGUSJQoIdm9sZWNpdHkYAyAB",
            "KAsyEy5OZXRQcm90by5QQlZlY3RvcjMSIAoDcG9zGAQgASgLMhMuTmV0UHJv",
            "dG8uUEJWZWN0b3IzEhAKCHJvdGF0aW9uGAUgASgCIi0KCU1vdmVUb1BvcxIg",
            "CgNwb3MYASABKAsyEy5OZXRQcm90by5QQlZlY3RvcjIifgoPQmF0dGxlT3Bl",
            "cmF0aW9uEikKBW9wZXJhGAEgASgOMhouTmV0UHJvdG8uRUJhdHRsZU9wZXJh",
            "dGlvbhIRCgl0YXJnZXRfaWQYAiABKAQSCwoDZGlyGAMgASgCEiAKA3BvcxgE",
            "IAEoCzITLk5ldFByb3RvLlBCVmVjdG9yMiJCCghWaWV3R3JpZBIjCgZjZW50",
            "ZXIYASABKAsyEy5OZXRQcm90by5QQlZlY3RvcjISEQoJZ3JpZF90eXBlGAIg",
            "ASgFIjoKEFZpZXdTbmFwc2hvdERpZmYSEgoKbW9yZV9ncmlkcxgBIAMoBRIS",
            "CgptaXNzX2dyaWRzGAIgAygFIiMKDFZpZXdTbmFwc2hvdBITCgtsaWdodF9n",
            "cmlkcxgBIAMoBSJeCgxWaWV3QWxsR3JpZHMSEQoJZ3JpZF9zaXplGAEgASgC",
            "EgsKA3JvdxgCIAEoBRILCgNjb2wYAyABKAUSIQoFZ3JpZHMYBCADKAsyEi5O",
            "ZXRQcm90by5WaWV3R3JpZEID+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NetProto.CommonReflection.Descriptor, global::NetProto.BattleEnumReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RspFreeHero), global::NetProto.RspFreeHero.Parser, new[]{ "RedHeroId", "BlueHeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SelectHeroReq), global::NetProto.SelectHeroReq.Parser, new[]{ "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SelectHeroRsp), global::NetProto.SelectHeroRsp.Parser, new[]{ "HeroId", "IsSucc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SceneObjectDisappear), global::NetProto.SceneObjectDisappear.Parser, new[]{ "Objids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SceneObjectState), global::NetProto.SceneObjectState.Parser, new[]{ "Objid", "ObjType", "ModelId", "Pos", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MoveObjectState), global::NetProto.MoveObjectState.Parser, new[]{ "ObjState", "Radius", "Height", "Mass", "MaxSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MoveObjectMutableState), global::NetProto.MoveObjectMutableState.Parser, new[]{ "Objid", "MoveAgentState", "Volecity", "Pos", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MoveToPos), global::NetProto.MoveToPos.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleOperation), global::NetProto.BattleOperation.Parser, new[]{ "Opera", "TargetId", "Dir", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.ViewGrid), global::NetProto.ViewGrid.Parser, new[]{ "Center", "GridType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.ViewSnapshotDiff), global::NetProto.ViewSnapshotDiff.Parser, new[]{ "MoreGrids", "MissGrids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.ViewSnapshot), global::NetProto.ViewSnapshot.Parser, new[]{ "LightGrids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.ViewAllGrids), global::NetProto.ViewAllGrids.Parser, new[]{ "GridSize", "Row", "Col", "Grids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RspFreeHero : pb::IMessage<RspFreeHero> {
    private static readonly pb::MessageParser<RspFreeHero> _parser = new pb::MessageParser<RspFreeHero>(() => new RspFreeHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RspFreeHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspFreeHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspFreeHero(RspFreeHero other) : this() {
      redHeroId_ = other.redHeroId_;
      blueHeroId_ = other.blueHeroId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspFreeHero Clone() {
      return new RspFreeHero(this);
    }

    /// <summary>Field number for the "red_hero_id" field.</summary>
    public const int RedHeroIdFieldNumber = 1;
    private ulong redHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RedHeroId {
      get { return redHeroId_; }
      set {
        redHeroId_ = value;
      }
    }

    /// <summary>Field number for the "blue_hero_id" field.</summary>
    public const int BlueHeroIdFieldNumber = 2;
    private ulong blueHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlueHeroId {
      get { return blueHeroId_; }
      set {
        blueHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RspFreeHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RspFreeHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedHeroId != other.RedHeroId) return false;
      if (BlueHeroId != other.BlueHeroId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedHeroId != 0UL) hash ^= RedHeroId.GetHashCode();
      if (BlueHeroId != 0UL) hash ^= BlueHeroId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedHeroId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RedHeroId);
      }
      if (BlueHeroId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BlueHeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedHeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RedHeroId);
      }
      if (BlueHeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlueHeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RspFreeHero other) {
      if (other == null) {
        return;
      }
      if (other.RedHeroId != 0UL) {
        RedHeroId = other.RedHeroId;
      }
      if (other.BlueHeroId != 0UL) {
        BlueHeroId = other.BlueHeroId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedHeroId = input.ReadUInt64();
            break;
          }
          case 16: {
            BlueHeroId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectHeroReq : pb::IMessage<SelectHeroReq> {
    private static readonly pb::MessageParser<SelectHeroReq> _parser = new pb::MessageParser<SelectHeroReq>(() => new SelectHeroReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectHeroReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroReq(SelectHeroReq other) : this() {
      heroId_ = other.heroId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroReq Clone() {
      return new SelectHeroReq(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private ulong heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectHeroReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectHeroReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0UL) hash ^= HeroId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectHeroReq other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0UL) {
        HeroId = other.HeroId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectHeroRsp : pb::IMessage<SelectHeroRsp> {
    private static readonly pb::MessageParser<SelectHeroRsp> _parser = new pb::MessageParser<SelectHeroRsp>(() => new SelectHeroRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectHeroRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroRsp(SelectHeroRsp other) : this() {
      heroId_ = other.heroId_;
      isSucc_ = other.isSucc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroRsp Clone() {
      return new SelectHeroRsp(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private ulong heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "is_succ" field.</summary>
    public const int IsSuccFieldNumber = 2;
    private bool isSucc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSucc {
      get { return isSucc_; }
      set {
        isSucc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectHeroRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectHeroRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (IsSucc != other.IsSucc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0UL) hash ^= HeroId.GetHashCode();
      if (IsSucc != false) hash ^= IsSucc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HeroId);
      }
      if (IsSucc != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSucc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeroId);
      }
      if (IsSucc != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectHeroRsp other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0UL) {
        HeroId = other.HeroId;
      }
      if (other.IsSucc != false) {
        IsSucc = other.IsSucc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsSucc = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneObjectDisappear : pb::IMessage<SceneObjectDisappear> {
    private static readonly pb::MessageParser<SceneObjectDisappear> _parser = new pb::MessageParser<SceneObjectDisappear>(() => new SceneObjectDisappear());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneObjectDisappear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectDisappear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectDisappear(SceneObjectDisappear other) : this() {
      objids_ = other.objids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectDisappear Clone() {
      return new SceneObjectDisappear(this);
    }

    /// <summary>Field number for the "objids" field.</summary>
    public const int ObjidsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_objids_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> objids_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Objids {
      get { return objids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneObjectDisappear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneObjectDisappear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objids_.Equals(other.objids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objids_.WriteTo(output, _repeated_objids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objids_.CalculateSize(_repeated_objids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneObjectDisappear other) {
      if (other == null) {
        return;
      }
      objids_.Add(other.objids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            objids_.AddEntriesFrom(input, _repeated_objids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneObjectState : pb::IMessage<SceneObjectState> {
    private static readonly pb::MessageParser<SceneObjectState> _parser = new pb::MessageParser<SceneObjectState>(() => new SceneObjectState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneObjectState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectState(SceneObjectState other) : this() {
      objid_ = other.objid_;
      objType_ = other.objType_;
      modelId_ = other.modelId_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      rotation_ = other.rotation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectState Clone() {
      return new SceneObjectState(this);
    }

    /// <summary>Field number for the "objid" field.</summary>
    public const int ObjidFieldNumber = 1;
    private ulong objid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objid {
      get { return objid_; }
      set {
        objid_ = value;
      }
    }

    /// <summary>Field number for the "obj_type" field.</summary>
    public const int ObjTypeFieldNumber = 2;
    private global::NetProto.ESceneObject objType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.ESceneObject ObjType {
      get { return objType_; }
      set {
        objType_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::NetProto.PBVector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneObjectState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneObjectState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Objid != other.Objid) return false;
      if (ObjType != other.ObjType) return false;
      if (ModelId != other.ModelId) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Rotation != other.Rotation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Objid != 0UL) hash ^= Objid.GetHashCode();
      if (ObjType != 0) hash ^= ObjType.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Rotation != 0F) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Objid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Objid);
      }
      if (ObjType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ObjType);
      }
      if (ModelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelId);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (Rotation != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Objid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objid);
      }
      if (ObjType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjType);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Rotation != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneObjectState other) {
      if (other == null) {
        return;
      }
      if (other.Objid != 0UL) {
        Objid = other.Objid;
      }
      if (other.ObjType != 0) {
        ObjType = other.ObjType;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NetProto.PBVector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Objid = input.ReadUInt64();
            break;
          }
          case 16: {
            objType_ = (global::NetProto.ESceneObject) input.ReadEnum();
            break;
          }
          case 24: {
            ModelId = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::NetProto.PBVector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 45: {
            Rotation = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveObjectState : pb::IMessage<MoveObjectState> {
    private static readonly pb::MessageParser<MoveObjectState> _parser = new pb::MessageParser<MoveObjectState>(() => new MoveObjectState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveObjectState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectState(MoveObjectState other) : this() {
      ObjState = other.objState_ != null ? other.ObjState.Clone() : null;
      radius_ = other.radius_;
      height_ = other.height_;
      mass_ = other.mass_;
      maxSpeed_ = other.maxSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectState Clone() {
      return new MoveObjectState(this);
    }

    /// <summary>Field number for the "obj_state" field.</summary>
    public const int ObjStateFieldNumber = 1;
    private global::NetProto.SceneObjectState objState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.SceneObjectState ObjState {
      get { return objState_; }
      set {
        objState_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 4;
    private int mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "max_speed" field.</summary>
    public const int MaxSpeedFieldNumber = 5;
    private int maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveObjectState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveObjectState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjState, other.ObjState)) return false;
      if (Radius != other.Radius) return false;
      if (Height != other.Height) return false;
      if (Mass != other.Mass) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objState_ != null) hash ^= ObjState.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Mass != 0) hash ^= Mass.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjState);
      }
      if (Radius != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Radius);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (Mass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mass);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjState);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Mass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mass);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveObjectState other) {
      if (other == null) {
        return;
      }
      if (other.objState_ != null) {
        if (objState_ == null) {
          objState_ = new global::NetProto.SceneObjectState();
        }
        ObjState.MergeFrom(other.ObjState);
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Mass != 0) {
        Mass = other.Mass;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (objState_ == null) {
              objState_ = new global::NetProto.SceneObjectState();
            }
            input.ReadMessage(objState_);
            break;
          }
          case 16: {
            Radius = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 32: {
            Mass = input.ReadInt32();
            break;
          }
          case 40: {
            MaxSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveObjectMutableState : pb::IMessage<MoveObjectMutableState> {
    private static readonly pb::MessageParser<MoveObjectMutableState> _parser = new pb::MessageParser<MoveObjectMutableState>(() => new MoveObjectMutableState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveObjectMutableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectMutableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectMutableState(MoveObjectMutableState other) : this() {
      objid_ = other.objid_;
      moveAgentState_ = other.moveAgentState_;
      Volecity = other.volecity_ != null ? other.Volecity.Clone() : null;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      rotation_ = other.rotation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectMutableState Clone() {
      return new MoveObjectMutableState(this);
    }

    /// <summary>Field number for the "objid" field.</summary>
    public const int ObjidFieldNumber = 1;
    private ulong objid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objid {
      get { return objid_; }
      set {
        objid_ = value;
      }
    }

    /// <summary>Field number for the "move_agent_state" field.</summary>
    public const int MoveAgentStateFieldNumber = 2;
    private global::NetProto.EMoveAgentState moveAgentState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.EMoveAgentState MoveAgentState {
      get { return moveAgentState_; }
      set {
        moveAgentState_ = value;
      }
    }

    /// <summary>Field number for the "volecity" field.</summary>
    public const int VolecityFieldNumber = 3;
    private global::NetProto.PBVector3 volecity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector3 Volecity {
      get { return volecity_; }
      set {
        volecity_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::NetProto.PBVector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveObjectMutableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveObjectMutableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Objid != other.Objid) return false;
      if (MoveAgentState != other.MoveAgentState) return false;
      if (!object.Equals(Volecity, other.Volecity)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Rotation != other.Rotation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Objid != 0UL) hash ^= Objid.GetHashCode();
      if (MoveAgentState != 0) hash ^= MoveAgentState.GetHashCode();
      if (volecity_ != null) hash ^= Volecity.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Rotation != 0F) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Objid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Objid);
      }
      if (MoveAgentState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MoveAgentState);
      }
      if (volecity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Volecity);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (Rotation != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Objid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objid);
      }
      if (MoveAgentState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MoveAgentState);
      }
      if (volecity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Volecity);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Rotation != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveObjectMutableState other) {
      if (other == null) {
        return;
      }
      if (other.Objid != 0UL) {
        Objid = other.Objid;
      }
      if (other.MoveAgentState != 0) {
        MoveAgentState = other.MoveAgentState;
      }
      if (other.volecity_ != null) {
        if (volecity_ == null) {
          volecity_ = new global::NetProto.PBVector3();
        }
        Volecity.MergeFrom(other.Volecity);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NetProto.PBVector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Objid = input.ReadUInt64();
            break;
          }
          case 16: {
            moveAgentState_ = (global::NetProto.EMoveAgentState) input.ReadEnum();
            break;
          }
          case 26: {
            if (volecity_ == null) {
              volecity_ = new global::NetProto.PBVector3();
            }
            input.ReadMessage(volecity_);
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::NetProto.PBVector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 45: {
            Rotation = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveToPos : pb::IMessage<MoveToPos> {
    private static readonly pb::MessageParser<MoveToPos> _parser = new pb::MessageParser<MoveToPos>(() => new MoveToPos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToPos(MoveToPos other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToPos Clone() {
      return new MoveToPos(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::NetProto.PBVector2 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector2 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToPos other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NetProto.PBVector2();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::NetProto.PBVector2();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleOperation : pb::IMessage<BattleOperation> {
    private static readonly pb::MessageParser<BattleOperation> _parser = new pb::MessageParser<BattleOperation>(() => new BattleOperation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleOperation(BattleOperation other) : this() {
      opera_ = other.opera_;
      targetId_ = other.targetId_;
      dir_ = other.dir_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleOperation Clone() {
      return new BattleOperation(this);
    }

    /// <summary>Field number for the "opera" field.</summary>
    public const int OperaFieldNumber = 1;
    private global::NetProto.EBattleOperation opera_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.EBattleOperation Opera {
      get { return opera_; }
      set {
        opera_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private ulong targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private float dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::NetProto.PBVector2 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector2 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Opera != other.Opera) return false;
      if (TargetId != other.TargetId) return false;
      if (Dir != other.Dir) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Opera != 0) hash ^= Opera.GetHashCode();
      if (TargetId != 0UL) hash ^= TargetId.GetHashCode();
      if (Dir != 0F) hash ^= Dir.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opera != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Opera);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetId);
      }
      if (Dir != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Dir);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opera != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opera);
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      if (Dir != 0F) {
        size += 1 + 4;
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleOperation other) {
      if (other == null) {
        return;
      }
      if (other.Opera != 0) {
        Opera = other.Opera;
      }
      if (other.TargetId != 0UL) {
        TargetId = other.TargetId;
      }
      if (other.Dir != 0F) {
        Dir = other.Dir;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NetProto.PBVector2();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            opera_ = (global::NetProto.EBattleOperation) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt64();
            break;
          }
          case 29: {
            Dir = input.ReadFloat();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::NetProto.PBVector2();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewGrid : pb::IMessage<ViewGrid> {
    private static readonly pb::MessageParser<ViewGrid> _parser = new pb::MessageParser<ViewGrid>(() => new ViewGrid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewGrid(ViewGrid other) : this() {
      Center = other.center_ != null ? other.Center.Clone() : null;
      gridType_ = other.gridType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewGrid Clone() {
      return new ViewGrid(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::NetProto.PBVector2 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector2 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "grid_type" field.</summary>
    public const int GridTypeFieldNumber = 2;
    private int gridType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridType {
      get { return gridType_; }
      set {
        gridType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (GridType != other.GridType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (GridType != 0) hash ^= GridType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (GridType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (GridType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewGrid other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::NetProto.PBVector2();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.GridType != 0) {
        GridType = other.GridType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (center_ == null) {
              center_ = new global::NetProto.PBVector2();
            }
            input.ReadMessage(center_);
            break;
          }
          case 16: {
            GridType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewSnapshotDiff : pb::IMessage<ViewSnapshotDiff> {
    private static readonly pb::MessageParser<ViewSnapshotDiff> _parser = new pb::MessageParser<ViewSnapshotDiff>(() => new ViewSnapshotDiff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewSnapshotDiff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewSnapshotDiff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewSnapshotDiff(ViewSnapshotDiff other) : this() {
      moreGrids_ = other.moreGrids_.Clone();
      missGrids_ = other.missGrids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewSnapshotDiff Clone() {
      return new ViewSnapshotDiff(this);
    }

    /// <summary>Field number for the "more_grids" field.</summary>
    public const int MoreGridsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_moreGrids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> moreGrids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MoreGrids {
      get { return moreGrids_; }
    }

    /// <summary>Field number for the "miss_grids" field.</summary>
    public const int MissGridsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_missGrids_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> missGrids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MissGrids {
      get { return missGrids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewSnapshotDiff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewSnapshotDiff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!moreGrids_.Equals(other.moreGrids_)) return false;
      if(!missGrids_.Equals(other.missGrids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= moreGrids_.GetHashCode();
      hash ^= missGrids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      moreGrids_.WriteTo(output, _repeated_moreGrids_codec);
      missGrids_.WriteTo(output, _repeated_missGrids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += moreGrids_.CalculateSize(_repeated_moreGrids_codec);
      size += missGrids_.CalculateSize(_repeated_missGrids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewSnapshotDiff other) {
      if (other == null) {
        return;
      }
      moreGrids_.Add(other.moreGrids_);
      missGrids_.Add(other.missGrids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            moreGrids_.AddEntriesFrom(input, _repeated_moreGrids_codec);
            break;
          }
          case 18:
          case 16: {
            missGrids_.AddEntriesFrom(input, _repeated_missGrids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewSnapshot : pb::IMessage<ViewSnapshot> {
    private static readonly pb::MessageParser<ViewSnapshot> _parser = new pb::MessageParser<ViewSnapshot>(() => new ViewSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewSnapshot(ViewSnapshot other) : this() {
      lightGrids_ = other.lightGrids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewSnapshot Clone() {
      return new ViewSnapshot(this);
    }

    /// <summary>Field number for the "light_grids" field.</summary>
    public const int LightGridsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_lightGrids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> lightGrids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LightGrids {
      get { return lightGrids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lightGrids_.Equals(other.lightGrids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lightGrids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lightGrids_.WriteTo(output, _repeated_lightGrids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lightGrids_.CalculateSize(_repeated_lightGrids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewSnapshot other) {
      if (other == null) {
        return;
      }
      lightGrids_.Add(other.lightGrids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            lightGrids_.AddEntriesFrom(input, _repeated_lightGrids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewAllGrids : pb::IMessage<ViewAllGrids> {
    private static readonly pb::MessageParser<ViewAllGrids> _parser = new pb::MessageParser<ViewAllGrids>(() => new ViewAllGrids());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewAllGrids> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewAllGrids() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewAllGrids(ViewAllGrids other) : this() {
      gridSize_ = other.gridSize_;
      row_ = other.row_;
      col_ = other.col_;
      grids_ = other.grids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewAllGrids Clone() {
      return new ViewAllGrids(this);
    }

    /// <summary>Field number for the "grid_size" field.</summary>
    public const int GridSizeFieldNumber = 1;
    private float gridSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GridSize {
      get { return gridSize_; }
      set {
        gridSize_ = value;
      }
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 2;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 3;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "grids" field.</summary>
    public const int GridsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NetProto.ViewGrid> _repeated_grids_codec
        = pb::FieldCodec.ForMessage(34, global::NetProto.ViewGrid.Parser);
    private readonly pbc::RepeatedField<global::NetProto.ViewGrid> grids_ = new pbc::RepeatedField<global::NetProto.ViewGrid>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.ViewGrid> Grids {
      get { return grids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewAllGrids);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewAllGrids other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GridSize != other.GridSize) return false;
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if(!grids_.Equals(other.grids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GridSize != 0F) hash ^= GridSize.GetHashCode();
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      hash ^= grids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GridSize != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(GridSize);
      }
      if (Row != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Col);
      }
      grids_.WriteTo(output, _repeated_grids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GridSize != 0F) {
        size += 1 + 4;
      }
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      size += grids_.CalculateSize(_repeated_grids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewAllGrids other) {
      if (other == null) {
        return;
      }
      if (other.GridSize != 0F) {
        GridSize = other.GridSize;
      }
      if (other.Row != 0) {
        Row = other.Row;
      }
      if (other.Col != 0) {
        Col = other.Col;
      }
      grids_.Add(other.grids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            GridSize = input.ReadFloat();
            break;
          }
          case 16: {
            Row = input.ReadInt32();
            break;
          }
          case 24: {
            Col = input.ReadInt32();
            break;
          }
          case 34: {
            grids_.AddEntriesFrom(input, _repeated_grids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
