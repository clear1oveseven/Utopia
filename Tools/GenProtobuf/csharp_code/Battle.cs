// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from Battle.proto</summary>
  public static partial class BattleReflection {

    #region Descriptor
    /// <summary>File descriptor for Battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxCYXR0bGUucHJvdG8SCE5ldFByb3RvGgxDb21tb24ucHJvdG8iOAoLUnNw",
            "RnJlZUhlcm8SEwoLcmVkX2hlcm9faWQYASABKAQSFAoMYmx1ZV9oZXJvX2lk",
            "GAIgASgEIiAKDVNlbGVjdEhlcm9SZXESDwoHaGVyb19pZBgBIAEoBCIxCg1T",
            "ZWxlY3RIZXJvUnNwEg8KB2hlcm9faWQYASABKAQSDwoHaXNfc3VjYxgCIAEo",
            "CCKCAQoQU2NlbmVPYmplY3RTdGF0ZRINCgVvYmppZBgBIAEoBBIrCghvYmpf",
            "dHlwZRgCIAEoDjIZLk5ldFByb3RvLlNjZW5lT2JqZWN0VHlwZRIQCghtb2Rl",
            "bF9pZBgDIAEoBRIgCgNwb3MYBCABKAsyEy5OZXRQcm90by5QQlZlY3RvcjMi",
            "PwoTQWxsU2NlbmVPYmplY3RTdGF0ZRIoCgRvYmpzGAEgAygLMhouTmV0UHJv",
            "dG8uU2NlbmVPYmplY3RTdGF0ZSJSCg9Nb3ZlT2JqZWN0U3RhdGUSDgoGcmFk",
            "aXVzGAEgASgFEg4KBmhlaWdodBgCIAEoBRIMCgRtYXNzGAMgASgFEhEKCW1h",
            "eF9zcGVlZBgEIAEoBSIYChZNb3ZlT2JqZWN0TXV0YWJsZVN0YXRlIi0KCU1v",
            "dmVUb1BvcxIgCgNwb3MYASABKAsyEy5OZXRQcm90by5QQlZlY3RvcjIqOwoP",
            "U2NlbmVPYmplY3RUeXBlEgwKCEJ1aWxkaW5nEAASCAoESGVybxABEgcKA05w",
            "YxACEgcKA01BWBADQgP4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NetProto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NetProto.SceneObjectType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RspFreeHero), global::NetProto.RspFreeHero.Parser, new[]{ "RedHeroId", "BlueHeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SelectHeroReq), global::NetProto.SelectHeroReq.Parser, new[]{ "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SelectHeroRsp), global::NetProto.SelectHeroRsp.Parser, new[]{ "HeroId", "IsSucc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SceneObjectState), global::NetProto.SceneObjectState.Parser, new[]{ "Objid", "ObjType", "ModelId", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.AllSceneObjectState), global::NetProto.AllSceneObjectState.Parser, new[]{ "Objs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MoveObjectState), global::NetProto.MoveObjectState.Parser, new[]{ "Radius", "Height", "Mass", "MaxSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MoveObjectMutableState), global::NetProto.MoveObjectMutableState.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MoveToPos), global::NetProto.MoveToPos.Parser, new[]{ "Pos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SceneObjectType {
    [pbr::OriginalName("Building")] Building = 0,
    [pbr::OriginalName("Hero")] Hero = 1,
    [pbr::OriginalName("Npc")] Npc = 2,
    [pbr::OriginalName("MAX")] Max = 3,
  }

  #endregion

  #region Messages
  public sealed partial class RspFreeHero : pb::IMessage<RspFreeHero> {
    private static readonly pb::MessageParser<RspFreeHero> _parser = new pb::MessageParser<RspFreeHero>(() => new RspFreeHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RspFreeHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspFreeHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspFreeHero(RspFreeHero other) : this() {
      redHeroId_ = other.redHeroId_;
      blueHeroId_ = other.blueHeroId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspFreeHero Clone() {
      return new RspFreeHero(this);
    }

    /// <summary>Field number for the "red_hero_id" field.</summary>
    public const int RedHeroIdFieldNumber = 1;
    private ulong redHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RedHeroId {
      get { return redHeroId_; }
      set {
        redHeroId_ = value;
      }
    }

    /// <summary>Field number for the "blue_hero_id" field.</summary>
    public const int BlueHeroIdFieldNumber = 2;
    private ulong blueHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlueHeroId {
      get { return blueHeroId_; }
      set {
        blueHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RspFreeHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RspFreeHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedHeroId != other.RedHeroId) return false;
      if (BlueHeroId != other.BlueHeroId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedHeroId != 0UL) hash ^= RedHeroId.GetHashCode();
      if (BlueHeroId != 0UL) hash ^= BlueHeroId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedHeroId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RedHeroId);
      }
      if (BlueHeroId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BlueHeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedHeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RedHeroId);
      }
      if (BlueHeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlueHeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RspFreeHero other) {
      if (other == null) {
        return;
      }
      if (other.RedHeroId != 0UL) {
        RedHeroId = other.RedHeroId;
      }
      if (other.BlueHeroId != 0UL) {
        BlueHeroId = other.BlueHeroId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedHeroId = input.ReadUInt64();
            break;
          }
          case 16: {
            BlueHeroId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectHeroReq : pb::IMessage<SelectHeroReq> {
    private static readonly pb::MessageParser<SelectHeroReq> _parser = new pb::MessageParser<SelectHeroReq>(() => new SelectHeroReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectHeroReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroReq(SelectHeroReq other) : this() {
      heroId_ = other.heroId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroReq Clone() {
      return new SelectHeroReq(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private ulong heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectHeroReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectHeroReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0UL) hash ^= HeroId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectHeroReq other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0UL) {
        HeroId = other.HeroId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectHeroRsp : pb::IMessage<SelectHeroRsp> {
    private static readonly pb::MessageParser<SelectHeroRsp> _parser = new pb::MessageParser<SelectHeroRsp>(() => new SelectHeroRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectHeroRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroRsp(SelectHeroRsp other) : this() {
      heroId_ = other.heroId_;
      isSucc_ = other.isSucc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectHeroRsp Clone() {
      return new SelectHeroRsp(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private ulong heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "is_succ" field.</summary>
    public const int IsSuccFieldNumber = 2;
    private bool isSucc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSucc {
      get { return isSucc_; }
      set {
        isSucc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectHeroRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectHeroRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (IsSucc != other.IsSucc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0UL) hash ^= HeroId.GetHashCode();
      if (IsSucc != false) hash ^= IsSucc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HeroId);
      }
      if (IsSucc != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSucc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeroId);
      }
      if (IsSucc != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectHeroRsp other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0UL) {
        HeroId = other.HeroId;
      }
      if (other.IsSucc != false) {
        IsSucc = other.IsSucc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsSucc = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneObjectState : pb::IMessage<SceneObjectState> {
    private static readonly pb::MessageParser<SceneObjectState> _parser = new pb::MessageParser<SceneObjectState>(() => new SceneObjectState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneObjectState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectState(SceneObjectState other) : this() {
      objid_ = other.objid_;
      objType_ = other.objType_;
      modelId_ = other.modelId_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectState Clone() {
      return new SceneObjectState(this);
    }

    /// <summary>Field number for the "objid" field.</summary>
    public const int ObjidFieldNumber = 1;
    private ulong objid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objid {
      get { return objid_; }
      set {
        objid_ = value;
      }
    }

    /// <summary>Field number for the "obj_type" field.</summary>
    public const int ObjTypeFieldNumber = 2;
    private global::NetProto.SceneObjectType objType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.SceneObjectType ObjType {
      get { return objType_; }
      set {
        objType_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::NetProto.PBVector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneObjectState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneObjectState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Objid != other.Objid) return false;
      if (ObjType != other.ObjType) return false;
      if (ModelId != other.ModelId) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Objid != 0UL) hash ^= Objid.GetHashCode();
      if (ObjType != 0) hash ^= ObjType.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Objid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Objid);
      }
      if (ObjType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ObjType);
      }
      if (ModelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModelId);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Objid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objid);
      }
      if (ObjType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjType);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneObjectState other) {
      if (other == null) {
        return;
      }
      if (other.Objid != 0UL) {
        Objid = other.Objid;
      }
      if (other.ObjType != 0) {
        ObjType = other.ObjType;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NetProto.PBVector3();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Objid = input.ReadUInt64();
            break;
          }
          case 16: {
            objType_ = (global::NetProto.SceneObjectType) input.ReadEnum();
            break;
          }
          case 24: {
            ModelId = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::NetProto.PBVector3();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllSceneObjectState : pb::IMessage<AllSceneObjectState> {
    private static readonly pb::MessageParser<AllSceneObjectState> _parser = new pb::MessageParser<AllSceneObjectState>(() => new AllSceneObjectState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllSceneObjectState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSceneObjectState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSceneObjectState(AllSceneObjectState other) : this() {
      objs_ = other.objs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllSceneObjectState Clone() {
      return new AllSceneObjectState(this);
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetProto.SceneObjectState> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(10, global::NetProto.SceneObjectState.Parser);
    private readonly pbc::RepeatedField<global::NetProto.SceneObjectState> objs_ = new pbc::RepeatedField<global::NetProto.SceneObjectState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.SceneObjectState> Objs {
      get { return objs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllSceneObjectState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllSceneObjectState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objs_.Equals(other.objs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objs_.WriteTo(output, _repeated_objs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objs_.CalculateSize(_repeated_objs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllSceneObjectState other) {
      if (other == null) {
        return;
      }
      objs_.Add(other.objs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveObjectState : pb::IMessage<MoveObjectState> {
    private static readonly pb::MessageParser<MoveObjectState> _parser = new pb::MessageParser<MoveObjectState>(() => new MoveObjectState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveObjectState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectState(MoveObjectState other) : this() {
      radius_ = other.radius_;
      height_ = other.height_;
      mass_ = other.mass_;
      maxSpeed_ = other.maxSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectState Clone() {
      return new MoveObjectState(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 3;
    private int mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "max_speed" field.</summary>
    public const int MaxSpeedFieldNumber = 4;
    private int maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveObjectState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveObjectState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      if (Height != other.Height) return false;
      if (Mass != other.Mass) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Mass != 0) hash ^= Mass.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Radius);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Mass != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mass);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Mass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mass);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveObjectState other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Mass != 0) {
        Mass = other.Mass;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Radius = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Mass = input.ReadInt32();
            break;
          }
          case 32: {
            MaxSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveObjectMutableState : pb::IMessage<MoveObjectMutableState> {
    private static readonly pb::MessageParser<MoveObjectMutableState> _parser = new pb::MessageParser<MoveObjectMutableState>(() => new MoveObjectMutableState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveObjectMutableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectMutableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectMutableState(MoveObjectMutableState other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveObjectMutableState Clone() {
      return new MoveObjectMutableState(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveObjectMutableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveObjectMutableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveObjectMutableState other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MoveToPos : pb::IMessage<MoveToPos> {
    private static readonly pb::MessageParser<MoveToPos> _parser = new pb::MessageParser<MoveToPos>(() => new MoveToPos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToPos(MoveToPos other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToPos Clone() {
      return new MoveToPos(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::NetProto.PBVector2 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PBVector2 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToPos other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NetProto.PBVector2();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::NetProto.PBVector2();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
